/* Definition section */
%{
#include "y.tab.h"	/* header file generated by bison */

extern YYSTYPE yylval; //YYSTYPE
char buf[256];

/* This macro is used to record code line */
#define CONCAT { strncat(buf, yytext, BUF_SIZE - strlen(buf) - 1); }
%}

/* Define regular expression label */
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
float       {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { printf("%s", yytext); strcat(buf, yytext); return ADD; }
"-" 	{ printf("%s", yytext); strcat(buf, yytext); return SUB; }
"*" 	{ printf("%s", yytext); strcat(buf, yytext); return MUL; }
"/" 	{ printf("%s", yytext); strcat(buf, yytext); return DIV; }
"%"     { printf("%s", yytext); strcat(buf, yytext); return MOD; }
"++"    { printf("%s", yytext); strcat(buf, yytext); return INC; }
"--"    { printf("%s", yytext); strcat(buf, yytext); return DEC; }

 /* Relational */
">"		{ printf("%s", yytext); strcat(buf, yytext); return MT; }
"<"		{ printf("%s", yytext); strcat(buf, yytext); return LT; }
">="	{ printf("%s", yytext); strcat(buf, yytext); return MTE; }
"<="	{ printf("%s", yytext); strcat(buf, yytext); return LTE; }
"=="	{ printf("%s", yytext); strcat(buf, yytext); return EQ; }
"!="	{ printf("%s", yytext); strcat(buf, yytext); return NE; }

 /* Assignment */
"="		{ printf("%s", yytext); strcat(buf, yytext); return ASGN; }
"+="	{ printf("%s", yytext); strcat(buf, yytext); return ADDASGN; }
"-="	{ printf("%s", yytext); strcat(buf, yytext); return SUBASGN; }
"*="	{ printf("%s", yytext); strcat(buf, yytext); return MULASGN; }
"/="	{ printf("%s", yytext); strcat(buf, yytext); return DIVASGN; }
"%="	{ printf("%s", yytext); strcat(buf, yytext); return MODASGN; }

 /* Logical */
"&&"	{ printf("%s", yytext); strcat(buf, yytext); return AND; }
"||"	{ printf("%s", yytext); strcat(buf, yytext); return OR; }
"!"		{ printf("%s", yytext); strcat(buf, yytext); return NOT; }

 /* Delimiters */
"("		{ printf("%s", yytext); strcat(buf, yytext); return LB; }
")"		{ printf("%s", yytext); strcat(buf, yytext); return RB; }
"{"		{ printf("%s", yytext); strcat(buf, yytext); return LCB; }
"}"		{ printf("%s", yytext); strcat(buf, yytext); return RCB; }
"["		{ printf("%s", yytext); strcat(buf, yytext); return LSB; }
"]"		{ printf("%s", yytext); strcat(buf, yytext); return RSB; }
","		{ printf("%s", yytext); strcat(buf, yytext); return COMMA; }

 /* Print Keywords */	
"print"		{ printf("%s", yytext);  strcat(buf, yytext); return PRINT; }

 /* Condition and Loop Keywords */
"if"		{ printf("%s", yytext);  strcat(buf, yytext); return IF; }
"else"		{ printf("%s", yytext);  strcat(buf, yytext); return ELSE; }
"for"		{ printf("%s", yytext);  strcat(buf, yytext); return FOR; }
"while"		{ printf("%s", yytext);  strcat(buf, yytext); return WHILE; }

 /* Declaration Keywords */
"void"		{ printf("%s", yytext);  strcat(buf, yytext); yylval.string = strdup(yytext); return VOID; }
"int"		{ printf("%s", yytext);  strcat(buf, yytext); yylval.string = strdup(yytext); return INT; }
"float"  	{ printf("%s", yytext);  strcat(buf, yytext); yylval.string = strdup(yytext); return FLOAT; }
"string"  	{ printf("%s", yytext);  strcat(buf, yytext); yylval.string = strdup(yytext); return STRING; }
"bool"  	{ printf("%s", yytext);  strcat(buf, yytext); yylval.string = strdup(yytext); return BOOL; }

 /* boolean Keywords */
"true"      { printf("%s", yytext);  strcat(buf, yytext); yylval.bool_val = 1; return TRUE_RESULT; }
"false"     { printf("%s", yytext);  strcat(buf, yytext); yylval.bool_val = 0; return FALSE_RESULT; }

"return"    { printf("%s", yytext);  strcat(buf, yytext); return RET; }
"continue"	{ printf("%s", yytext);  strcat(buf, yytext); return CONTINUE; }
"break"	{ printf("%s", yytext);  strcat(buf, yytext); return BREAK; }

 /* String Constant */
\"				        { printf("%s", yytext);  strcat(buf, yytext); BEGIN STRING_STATE; }
<STRING_STATE>\"		{ printf("%s", yytext);  strcat(buf, yytext); BEGIN INITIAL; }
<STRING_STATE>[^"]*		{ printf("%s", yytext);  strcat(buf, yytext); yylval.string = strdup(yytext); return STR_CONST; }

 /* Number Constant */
{integer}	{ printf("%s", yytext);  strcat(buf, yytext); yylval.i_val = atoi(yytext); return I_CONST; }
{float}	    { printf("%s", yytext);  strcat(buf, yytext); yylval.f_val = atof(yytext); return F_CONST; }

 /* C type Comment */
"/*"				{ printf("%s", yytext);  strcat(buf, yytext); BEGIN COMMENT; }
<COMMENT>[^*\n]+	{ printf("%s", yytext);  strcat(buf, yytext); BEGIN COMMENT; }
<COMMENT>\n			{ printf("%s%d. ", yytext, yylineno); memset(buf, '\0', sizeof(buf)); BEGIN COMMENT; }
<COMMENT>"*"		{ printf("%s", yytext);  strcat(buf, yytext); BEGIN COMMENT; }
<COMMENT>"*/"		{ printf("%s", yytext);  strcat(buf, yytext); BEGIN INITIAL; }

 /* C++ type Comment */
\/\/.*	{ printf("%s", yytext);  strcat(buf, yytext); }

 /* Variable ID */
 {id}       { printf("%s", yytext);  strcat(buf, yytext); yylval.string = strdup(yytext); return ID; }

 /* others */

[;]         { printf("%s", yytext);  strcat(buf, yytext); return SEMICOLON; }
[\n]        { printf("%s%d. ", yytext, yylineno); memset(buf, '\0', sizeof(buf));}
[ \t]		{ printf("%s", yytext);  strcat(buf, yytext);} /* Ignore */
[^ \t\n] 	{ printf("%s", yytext);  strcat(buf, yytext);} /* Ignore other charactor sets */
<<EOF>>     { return 0; }

%%

int yywrap()
{
    return 1;
}
