Terminals unused in grammar

   PRINT
   IF
   ELSE
   FOR
   WHILE
   ADD
   SUB
   MUL
   DIV
   MOD
   INC
   DEC
   MT
   LT
   MTE
   LTE
   EQ
   NE
   ASGN
   ADDASGN
   SUBASGN
   MULASGN
   DIVASGN
   MODASGN
   AND
   OR
   NOT
   LB
   RB
   LCB
   RCB
   LSB
   RSB
   COMMA
   RET
   CONTINUE
   BREAK
   C_COMMENT
   CPP_COMMENT
   I_CONST
   F_CONST
   TRUE_RESULT
   FALSE_RESULT
   STR_CONST


Rules useless in parser due to conflicts

   14 compound_stat: %empty
   15              | %empty

   16 expression_stat: %empty
   17                | %empty

   18 print_func: %empty
   19           | %empty

   21 initializer: %empty


State 1 conflicts: 6 shift/reduce, 6 reduce/reduce
State 16 conflicts: 1 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: program stat
    2        | %empty

    3 stat: declaration
    4     | compound_stat
    5     | expression_stat
    6     | print_func

    7 declaration: type ID '=' initializer SEMICOLON
    8            | type ID SEMICOLON

    9 type: INT
   10     | FLOAT
   11     | BOOL
   12     | STRING
   13     | VOID

   14 compound_stat: %empty
   15              | %empty

   16 expression_stat: %empty
   17                | %empty

   18 print_func: %empty
   19           | %empty

   20 initializer: %empty
   21            | %empty


Terminals, with rules where they appear

$end (0) 0
'=' (61) 7
error (256)
PRINT (258)
IF (259)
ELSE (260)
FOR (261)
WHILE (262)
SEMICOLON (263) 7 8
ADD (264)
SUB (265)
MUL (266)
DIV (267)
MOD (268)
INC (269)
DEC (270)
MT (271)
LT (272)
MTE (273)
LTE (274)
EQ (275)
NE (276)
ASGN (277)
ADDASGN (278)
SUBASGN (279)
MULASGN (280)
DIVASGN (281)
MODASGN (282)
AND (283)
OR (284)
NOT (285)
LB (286)
RB (287)
LCB (288)
RCB (289)
LSB (290)
RSB (291)
COMMA (292)
RET (293)
CONTINUE (294)
BREAK (295)
C_COMMENT (296)
CPP_COMMENT (297)
I_CONST (298)
F_CONST (299)
TRUE_RESULT (300)
FALSE_RESULT (301)
INT (302) 9
FLOAT (303) 10
BOOL (304) 11
STRING (305) 12
VOID (306) 13
STR_CONST (307)
ID (308) 7 8


Nonterminals, with rules where they appear

$accept (55)
    on left: 0
program (56)
    on left: 1 2, on right: 0 1
stat (57)
    on left: 3 4 5 6, on right: 1
declaration (58)
    on left: 7 8, on right: 3
type (59)
    on left: 9 10 11 12 13, on right: 7 8
compound_stat (60)
    on left: 14 15, on right: 4
expression_stat (61)
    on left: 16 17, on right: 5
print_func (62)
    on left: 18 19, on right: 6
initializer (63)
    on left: 20 21, on right: 7


State 0

    0 $accept: . program $end

    $default  reduce using rule 2 (program)

    program  go to state 1


State 1

    0 $accept: program . $end
    1 program: program . stat

    $end    shift, and go to state 2
    INT     shift, and go to state 3
    FLOAT   shift, and go to state 4
    BOOL    shift, and go to state 5
    STRING  shift, and go to state 6
    VOID    shift, and go to state 7

    $end    [reduce using rule 14 (compound_stat)]
    $end    [reduce using rule 15 (compound_stat)]
    $end    [reduce using rule 16 (expression_stat)]
    $end    [reduce using rule 17 (expression_stat)]
    $end    [reduce using rule 18 (print_func)]
    $end    [reduce using rule 19 (print_func)]
    INT     [reduce using rule 14 (compound_stat)]
    INT     [reduce using rule 15 (compound_stat)]
    INT     [reduce using rule 16 (expression_stat)]
    INT     [reduce using rule 17 (expression_stat)]
    INT     [reduce using rule 18 (print_func)]
    INT     [reduce using rule 19 (print_func)]
    FLOAT   [reduce using rule 14 (compound_stat)]
    FLOAT   [reduce using rule 15 (compound_stat)]
    FLOAT   [reduce using rule 16 (expression_stat)]
    FLOAT   [reduce using rule 17 (expression_stat)]
    FLOAT   [reduce using rule 18 (print_func)]
    FLOAT   [reduce using rule 19 (print_func)]
    BOOL    [reduce using rule 14 (compound_stat)]
    BOOL    [reduce using rule 15 (compound_stat)]
    BOOL    [reduce using rule 16 (expression_stat)]
    BOOL    [reduce using rule 17 (expression_stat)]
    BOOL    [reduce using rule 18 (print_func)]
    BOOL    [reduce using rule 19 (print_func)]
    STRING  [reduce using rule 14 (compound_stat)]
    STRING  [reduce using rule 15 (compound_stat)]
    STRING  [reduce using rule 16 (expression_stat)]
    STRING  [reduce using rule 17 (expression_stat)]
    STRING  [reduce using rule 18 (print_func)]
    STRING  [reduce using rule 19 (print_func)]
    VOID    [reduce using rule 14 (compound_stat)]
    VOID    [reduce using rule 15 (compound_stat)]
    VOID    [reduce using rule 16 (expression_stat)]
    VOID    [reduce using rule 17 (expression_stat)]
    VOID    [reduce using rule 18 (print_func)]
    VOID    [reduce using rule 19 (print_func)]

    stat             go to state 8
    declaration      go to state 9
    type             go to state 10
    compound_stat    go to state 11
    expression_stat  go to state 12
    print_func       go to state 13


State 2

    0 $accept: program $end .

    $default  accept


State 3

    9 type: INT .

    $default  reduce using rule 9 (type)


State 4

   10 type: FLOAT .

    $default  reduce using rule 10 (type)


State 5

   11 type: BOOL .

    $default  reduce using rule 11 (type)


State 6

   12 type: STRING .

    $default  reduce using rule 12 (type)


State 7

   13 type: VOID .

    $default  reduce using rule 13 (type)


State 8

    1 program: program stat .

    $default  reduce using rule 1 (program)


State 9

    3 stat: declaration .

    $default  reduce using rule 3 (stat)


State 10

    7 declaration: type . ID '=' initializer SEMICOLON
    8            | type . ID SEMICOLON

    ID  shift, and go to state 14


State 11

    4 stat: compound_stat .

    $default  reduce using rule 4 (stat)


State 12

    5 stat: expression_stat .

    $default  reduce using rule 5 (stat)


State 13

    6 stat: print_func .

    $default  reduce using rule 6 (stat)


State 14

    7 declaration: type ID . '=' initializer SEMICOLON
    8            | type ID . SEMICOLON

    SEMICOLON  shift, and go to state 15
    '='        shift, and go to state 16


State 15

    8 declaration: type ID SEMICOLON .

    $default  reduce using rule 8 (declaration)


State 16

    7 declaration: type ID '=' . initializer SEMICOLON

    SEMICOLON  reduce using rule 20 (initializer)
    SEMICOLON  [reduce using rule 21 (initializer)]
    $default   reduce using rule 20 (initializer)

    initializer  go to state 17


State 17

    7 declaration: type ID '=' initializer . SEMICOLON

    SEMICOLON  shift, and go to state 18


State 18

    7 declaration: type ID '=' initializer SEMICOLON .

    $default  reduce using rule 7 (declaration)
